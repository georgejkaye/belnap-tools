// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Utils from "../Utils.res.mjs";
import * as Belnap from "./Belnap.res.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.res.mjs";

function string_of_expression(exp) {
  switch (exp.TAG) {
    case "Variable" :
        return "v" + exp._0.toString();
    case "Constant" :
        return Belnap.string_of_value(exp._0);
    case "And" :
        return "(" + string_of_expression(exp._0) + " ∧ " + string_of_expression(exp._1) + ")";
    case "Or" :
        return "(" + string_of_expression(exp._0) + " ∨ " + string_of_expression(exp._1) + ")";
    case "Not" :
        return "¬" + string_of_expression(exp._0);
    
  }
}

function function_to_rows(fn, m) {
  var input_values = Belnap.enumerate_inputs(m);
  return Core__Array.reduce(input_values, [], (function (acc, vs) {
                var ws = fn(vs);
                if (ws !== undefined) {
                  return Belt_Array.concatMany([
                              acc,
                              [[
                                  vs,
                                  Caml_option.valFromOption(ws)
                                ]]
                            ]);
                } else {
                  return acc;
                }
              }));
}

function string_of_row(param) {
  var string_of_cells = function (elements) {
    return Utils.concatAsStrings(elements, " ", Belnap.string_of_value);
  };
  var inputString = string_of_cells(param[0]);
  var outputString = string_of_cells(param[1]);
  return inputString + " | " + outputString;
}

function string_of_table(fn, m, n) {
  var rows = function_to_rows(fn, m);
  return Utils.concatAsStrings(rows, "\n", string_of_row);
}

function strings_of_table(fn, m, n) {
  var rows = function_to_rows(fn, m);
  return rows.map(string_of_row);
}

function get_conj(col_unit, high_value, get_col_op, inputs) {
  return Core__Array.reduceWithIndex(inputs, {
              TAG: "Constant",
              _0: col_unit
            }, (function (acc, cur, i) {
                if (cur === high_value) {
                  return get_col_op(acc, {
                              TAG: "Variable",
                              _0: i
                            });
                } else {
                  return acc;
                }
              }));
}

function get_dnf(col_unit, col_high_value, get_col_op, row_unit, row_high_value, get_row_op, output_index, rows) {
  return Core__Array.reduce(rows, {
              TAG: "Constant",
              _0: row_unit
            }, (function (acc, param) {
                var output = param[1][output_index];
                if (output === undefined) {
                  return acc;
                }
                if (Caml_option.valFromOption(output) !== row_high_value) {
                  return acc;
                }
                var element = get_conj(col_unit, col_high_value, get_col_op, param[0]);
                return get_row_op(acc, element);
              }));
}

function get_truthy_dnf(extra, extra$1) {
  return get_dnf("True", "True", (function (exp, v) {
                return {
                        TAG: "And",
                        _0: exp,
                        _1: v
                      };
              }), "Bottom", "True", (function (exp, v) {
                return {
                        TAG: "Or",
                        _0: exp,
                        _1: v
                      };
              }), extra, extra$1);
}

function get_falsy_dnf(extra, extra$1) {
  return get_dnf("False", "False", (function (exp, v) {
                return {
                        TAG: "Or",
                        _0: exp,
                        _1: v
                      };
              }), "Bottom", "False", (function (exp, v) {
                return {
                        TAG: "And",
                        _0: exp,
                        _1: v
                      };
              }), extra, extra$1);
}

var test_exp = {
  TAG: "And",
  _0: {
    TAG: "Or",
    _0: {
      TAG: "Variable",
      _0: 2
    },
    _1: {
      TAG: "Constant",
      _0: "False"
    }
  },
  _1: {
    TAG: "Variable",
    _0: 1
  }
};

var expression_of_function;

export {
  test_exp ,
  string_of_expression ,
  function_to_rows ,
  string_of_row ,
  string_of_table ,
  strings_of_table ,
  get_conj ,
  get_dnf ,
  get_truthy_dnf ,
  get_falsy_dnf ,
  expression_of_function ,
}
/* No side effect */
