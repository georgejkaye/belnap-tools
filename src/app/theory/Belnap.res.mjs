// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Utils from "../Utils.res.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Core__Array from "@rescript/core/src/Core__Array.res.mjs";

function string_of_value(value) {
  switch (value) {
    case "Bottom" :
        return "⊥";
    case "False" :
        return "f";
    case "True" :
        return "t";
    case "Top" :
        return "⊤";
    
  }
}

function latex_of_value(value) {
  switch (value) {
    case "Bottom" :
        return "\\bot";
    case "False" :
        return "\\mathsf{f}";
    case "True" :
        return "\\mathsf{t}";
    case "Top" :
        return "\\top";
    
  }
}

function value_of_string(string) {
  switch (string) {
    case "f" :
        return "False";
    case "t" :
        return "True";
    case "⊤" :
        return "Top";
    case "⊥" :
        return "Bottom";
    default:
      return ;
  }
}

var all_values = [
  "Bottom",
  "False",
  "True",
  "Top"
];

function truthy_of_value(value) {
  switch (value) {
    case "Bottom" :
        return [
                "Bottom",
                "Bottom"
              ];
    case "False" :
        return [
                "True",
                "Bottom"
              ];
    case "True" :
        return [
                "Bottom",
                "True"
              ];
    case "Top" :
        return [
                "True",
                "True"
              ];
    
  }
}

function falsy_of_value(value) {
  switch (value) {
    case "Bottom" :
        return [
                "Bottom",
                "Bottom"
              ];
    case "False" :
        return [
                "False",
                "Bottom"
              ];
    case "True" :
        return [
                "Bottom",
                "False"
              ];
    case "Top" :
        return [
                "False",
                "False"
              ];
    
  }
}

function enumerate_inputs(m) {
  if (m === 0) {
    return [[]];
  }
  var subs = enumerate_inputs(m - 1 | 0);
  return Core__Array.reduce(all_values, [], (function (acc, v) {
                return acc.concat(subs.map(function (vs) {
                                return Belt_Array.concatMany([
                                            [v],
                                            vs
                                          ]);
                              }));
              }));
}

function string_of_value_array(vs) {
  return Utils.concatAsStrings(vs, " ", string_of_value);
}

function and_fn(a, b) {
  switch (a) {
    case "Bottom" :
        switch (b) {
          case "Bottom" :
              return "Bottom";
          case "False" :
              break;
          case "True" :
              return a;
          case "Top" :
              return "False";
          
        }
        break;
    case "False" :
        return "False";
    case "True" :
        break;
    case "Top" :
        switch (b) {
          case "Bottom" :
              return "False";
          case "False" :
              break;
          case "True" :
              return a;
          case "Top" :
              return "Top";
          
        }
        break;
    
  }
  if (b === "False") {
    return "False";
  } else {
    return b;
  }
}

function or_fn(a, b) {
  switch (a) {
    case "Bottom" :
        switch (b) {
          case "Bottom" :
              return "Bottom";
          case "False" :
              return a;
          case "True" :
              break;
          case "Top" :
              return "True";
          
        }
        break;
    case "False" :
        break;
    case "True" :
        return "True";
    case "Top" :
        switch (b) {
          case "Bottom" :
              return "True";
          case "False" :
              return a;
          case "True" :
              break;
          case "Top" :
              return "Top";
          
        }
        break;
    
  }
  if (b === "True") {
    return "True";
  } else {
    return b;
  }
}

function not_fn(a) {
  switch (a) {
    case "Bottom" :
        return "Bottom";
    case "False" :
        return "True";
    case "True" :
        return "False";
    case "Top" :
        return "Top";
    
  }
}

function join_fn(a, b) {
  switch (a) {
    case "Bottom" :
        return b;
    case "False" :
        switch (b) {
          case "False" :
              return "False";
          case "True" :
              return "Top";
          case "Bottom" :
          case "Top" :
              break;
          
        }
        break;
    case "True" :
        switch (b) {
          case "False" :
              return "Top";
          case "True" :
              return "True";
          case "Bottom" :
          case "Top" :
              break;
          
        }
        break;
    case "Top" :
        break;
    
  }
  switch (b) {
    case "Bottom" :
        return a;
    case "False" :
    case "True" :
    case "Top" :
        return "Top";
    
  }
}

function test_fn(vs) {
  var x = vs[0];
  var y = vs[1];
  if (x !== undefined) {
    if (y !== undefined) {
      return [not_fn(and_fn(x, y))];
    }
    throw {
          RE_EXN_ID: "Not_found",
          Error: new Error()
        };
  }
  throw {
        RE_EXN_ID: "Not_found",
        Error: new Error()
      };
}

export {
  string_of_value ,
  latex_of_value ,
  value_of_string ,
  all_values ,
  truthy_of_value ,
  falsy_of_value ,
  enumerate_inputs ,
  string_of_value_array ,
  and_fn ,
  or_fn ,
  not_fn ,
  join_fn ,
  test_fn ,
}
/* No side effect */
