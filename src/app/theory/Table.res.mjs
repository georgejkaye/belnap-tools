// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Utils from "../Utils.res.mjs";
import * as Belnap from "./Belnap.res.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.res.mjs";

function table_of_function(fn, m) {
  var input_values = Belnap.enumerate_inputs(m);
  return Core__Array.reduce(input_values, [], (function (acc, vs) {
                var ws = fn(vs);
                if (ws !== undefined) {
                  return Belt_Array.concatMany([
                              acc,
                              [[
                                  vs,
                                  Caml_option.valFromOption(ws)
                                ]]
                            ]);
                } else {
                  return acc;
                }
              }));
}

function explode_row(exploder, left_bit, param) {
  var exploded_inputs = Core__Array.reduce(param[0], [], (function (acc, cur) {
          var match = exploder(cur);
          return Belt_Array.concatMany([
                      acc,
                      [
                        match[0],
                        match[1]
                      ]
                    ]);
        }));
  var exploded_outputs = Core__Array.reduce(param[1], [], (function (acc, cur) {
          var match = exploder(cur);
          var chosen = left_bit ? match[0] : match[1];
          return Belt_Array.concatMany([
                      acc,
                      [chosen]
                    ]);
        }));
  return [
          exploded_inputs,
          exploded_outputs
        ];
}

function explode_rows(exploder, left, rows) {
  return Core__Array.reduce(rows, [], (function (acc, row) {
                return Belt_Array.concatMany([
                            acc,
                            [explode_row(exploder, left, row)]
                          ]);
              }));
}

function truthy_table_of_table(extra) {
  return explode_rows(Belnap.truthy_of_value, false, extra);
}

function falsy_table_of_table(extra) {
  return explode_rows(Belnap.falsy_of_value, true, extra);
}

function string_of_row(param) {
  var string_of_cells = function (elements) {
    return Utils.concatAsStrings(elements, " ", Belnap.string_of_value);
  };
  var inputString = string_of_cells(param[0]);
  var outputString = string_of_cells(param[1]);
  return inputString + " | " + outputString;
}

function string_of_table(rows) {
  return Utils.concatAsStrings(rows, "\n", string_of_row);
}

function strings_of_table(rows) {
  return rows.map(string_of_row);
}

function string_of_function_table(fn, m) {
  var rows = table_of_function(fn, m);
  return string_of_table(rows);
}

function strings_of_function_table(fn, m) {
  var rows = table_of_function(fn, m);
  return strings_of_table(rows);
}

export {
  table_of_function ,
  falsy_table_of_table ,
  truthy_table_of_table ,
  string_of_table ,
  strings_of_table ,
  string_of_function_table ,
  strings_of_function_table ,
}
/* No side effect */
