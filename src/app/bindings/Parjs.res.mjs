// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Parjs from "parjs";
import * as Combinators from "parjs/combinators";

var Combinators$1 = {};

function then(p1, p2) {
  return p1.pipe(Combinators.then(p2));
}

function map(p1, f) {
  return p1.pipe(Combinators.map(f));
}

function or(p1, p2) {
  return p1.pipe(Combinators.or(p2));
}

function betweenOne(p1, surrounding) {
  return p1.pipe(Combinators.between(surrounding));
}

function betweenTwo(p1, pre, post) {
  return p1.pipe(Combinators.between(pre, post));
}

function betweenStrings(p1, pre, post) {
  return betweenTwo(p1, Parjs.string(pre), Parjs.string(post));
}

function later() {
  return Combinators.later();
}

function maybe(p1) {
  return p1.pipe(Combinators.maybe());
}

function recover(p1, recovery) {
  return p1.pipe(Combinators.recover(recovery));
}

function recoverSoft(p1) {
  return p1.pipe(Combinators.recover(function () {
                  return {
                          kind: "Soft"
                        };
                }));
}

export {
  Combinators$1 as Combinators,
  then ,
  map ,
  or ,
  betweenOne ,
  betweenTwo ,
  betweenStrings ,
  later ,
  maybe ,
  recover ,
  recoverSoft ,
}
/* parjs Not a pure module */
