// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Belnap from "../theory/Belnap.res.mjs";
import * as MoreReact from "../bindings/MoreReact.res.mjs";
import * as JsxRuntime from "react/jsx-runtime";

function TruthTable$Table(props) {
  var getOutput = props.getOutput;
  var getInput = props.getInput;
  var rows = props.rows;
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsx("div", {
                      children: MoreReact.mapfor(rows, (function (i) {
                              return JsxRuntime.jsx("div", {
                                          children: Belnap.string_of_value_array(getInput(i)),
                                          className: "font-mono"
                                        });
                            })),
                      className: "border-r pr-4 flex flex-col gap-2"
                    }),
                JsxRuntime.jsx("div", {
                      children: MoreReact.mapfor(rows, (function (i) {
                              return JsxRuntime.jsx("div", {
                                          children: Belnap.string_of_value_array(getOutput(i)),
                                          className: "font-mono"
                                        });
                            })),
                      className: "px-4 flex flex-col gap-2"
                    })
              ],
              className: "flex flex-row"
            });
}

var Table = {
  make: TruthTable$Table
};

function TruthTable$FromFunction(props) {
  var $$function = props.function;
  var inputSignals = Belnap.enumerate_inputs(props.inputs);
  var rows = inputSignals.length;
  var getInput = function (i) {
    return inputSignals[i];
  };
  var getOutput = function (i) {
    return $$function(inputSignals[i]);
  };
  return JsxRuntime.jsx(TruthTable$Table, {
              rows: rows,
              getInput: getInput,
              getOutput: getOutput
            });
}

var FromFunction = {
  make: TruthTable$FromFunction
};

function TruthTable$FromTable(props) {
  var table = props.table;
  var rows = table.length;
  var getInput = function (i) {
    return table[i][0];
  };
  var getOutput = function (i) {
    return table[i][1];
  };
  return JsxRuntime.jsx(TruthTable$Table, {
              rows: rows,
              getInput: getInput,
              getOutput: getOutput
            });
}

var FromTable = {
  make: TruthTable$FromTable
};

function TruthTable$FromInputOutputs(props) {
  var outputs = props.outputs;
  var inputs = props.inputs;
  var rows = inputs.length;
  var getInput = function (i) {
    return inputs[i];
  };
  var getOutput = function (i) {
    return outputs[i];
  };
  return JsxRuntime.jsx(TruthTable$Table, {
              rows: rows,
              getInput: getInput,
              getOutput: getOutput
            });
}

var FromInputOutputs = {
  make: TruthTable$FromInputOutputs
};

export {
  Table ,
  FromFunction ,
  FromTable ,
  FromInputOutputs ,
}
/* react/jsx-runtime Not a pure module */
